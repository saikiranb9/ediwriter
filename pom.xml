<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.2.4.RELEASE</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>
	<groupId>com.atd.microservices</groupId>
	<artifactId>ediwriter</artifactId>
	<version>1.0.0-SNAPSHOT</version>
	<name>ediwriter</name>
	<description>ediwriter BFF</description>
	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>			
		<zipkin.version>2.1.3.RELEASE</zipkin.version>
		<jib-maven-plugin.version>2.1.0</jib-maven-plugin.version>
		<jacoco.maven.plugin.version>0.8.2</jacoco.maven.plugin.version>
		<jacoco.classRate>1.00</jacoco.classRate>
		<jacoco.methodRate>0.80</jacoco.methodRate>
		<jacoco.lineRate>0.70</jacoco.lineRate>
		<jacoco.branchRate>0.56</jacoco.branchRate>
		<sonar-scm-git-plugin.version>1.6.0.1349</sonar-scm-git-plugin.version>
		<spring-cloud.version>Hoxton.SR8</spring-cloud.version>
		<springfox.swagger.version>3.0.0</springfox.swagger.version>
		<java.version>11</java.version>
		<commons-collections.version>4.4</commons-collections.version>
		<jib-maven-plugin.version>2.1.0</jib-maven-plugin.version>
	</properties>
	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-actuator</artifactId>
			<exclusions>
				<exclusion>
					<groupId>ch.qos.logback</groupId>
					<artifactId>logback-classic</artifactId>
				</exclusion>
				<exclusion>
					<groupId>ch.qos.logback</groupId>
					<artifactId>logback-core</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-webflux</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-tomcat</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-zipkin</artifactId>			
		</dependency>	
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-sleuth</artifactId>
		</dependency>
		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<optional>true</optional>
		</dependency>
		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-lang3</artifactId>
		</dependency>
		<dependency>
		    <groupId>org.springframework.boot</groupId>
		    <artifactId>spring-boot-starter-validation</artifactId>
		</dependency>
		<dependency>
			<groupId>io.springfox</groupId>
			<artifactId>springfox-boot-starter</artifactId>
			<version>${springfox.swagger.version}</version>
		</dependency>
		<dependency>
			<groupId>io.micrometer</groupId>
			<artifactId>micrometer-registry-prometheus</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.kafka</groupId>
			<artifactId>spring-kafka</artifactId>
		</dependency>
		<dependency>
			<groupId>io.projectreactor.kafka</groupId>
			<artifactId>reactor-kafka</artifactId>
			<!--  <version>1.2.2.RELEASE</version>-->
		</dependency>
		<dependency>
			<groupId>com.berryworks</groupId>
	        <artifactId>edireader-json</artifactId>
	        <version>5.7.7</version>
		</dependency>
		<dependency>
			<groupId>com.berryworks</groupId>
			<artifactId>model-yaml</artifactId>
			<version>5.7.7</version>
		</dependency>
		<dependency>
			<groupId>com.berryworks</groupId>
			<artifactId>validator</artifactId>
			<version>5.7.7</version>
		</dependency>
		<!-- 
		<dependency>
			<groupId>com.atd.utilities.kafkalogger</groupId>
			<artifactId>kafkalogger</artifactId>
			<version>1.1.0.RELEASE</version>
		</dependency>
		 -->
		<dependency>
			<groupId>org.springframework.kafka</groupId>
			<artifactId>spring-kafka-test</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>io.projectreactor</groupId>
			<artifactId>reactor-test</artifactId>
			<scope>test</scope>
		</dependency>
	</dependencies>
	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>org.springframework.cloud</groupId>
				<artifactId>spring-cloud-dependencies</artifactId>
				<version>${spring-cloud.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
			<dependency>
				<groupId>org.springframework.cloud</groupId>
				<artifactId>spring-cloud-starter-zipkin</artifactId>
				<version>${zipkin.version}</version>
			</dependency>
		</dependencies>
	</dependencyManagement>

	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>
			<plugin>
				<groupId>org.jacoco</groupId>
				<artifactId>jacoco-maven-plugin</artifactId>
				<version>${jacoco.maven.plugin.version}</version>
				<executions>
					<execution>
						<id>prepare-agent</id>
						<goals>
							<goal>prepare-agent</goal>
						</goals>
					</execution>
					<execution>
						<id>report</id>
						<phase>prepare-package</phase>
						<goals>
							<goal>report</goal>
						</goals>
					</execution>
					<execution>
						<id>check</id>
						<goals>
							<goal>check</goal>
						</goals>
						<configuration>
							<rules>
								<rule>
									<element>BUNDLE</element>
									<limits>
										<limit>
											<counter>CLASS</counter>
											<value>COVEREDRATIO</value>
											<minimum>${jacoco.classRate}</minimum>
										</limit>
										<limit>
											<counter>METHOD</counter>
											<value>COVEREDRATIO</value>
											<minimum>${jacoco.methodRate}</minimum>
										</limit>
										<limit>
											<counter>LINE</counter>
											<value>COVEREDRATIO</value>
											<minimum>${jacoco.lineRate}</minimum>
										</limit>
										<limit>
											<counter>BRANCH</counter>
											<value>COVEREDRATIO</value>
											<minimum>${jacoco.branchRate}</minimum>
										</limit>
									</limits>
								</rule>
							</rules>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<version>3.0.0-M5</version>
				<configuration>
					<includes>**/*Test.java</includes>
					<excludes>
						<exclude>**/*Application.java</exclude>
						<exclude>**/exception/*.java</exclude>
						<exclude>**/monitor/*.java</exclude>
						<exclude>**/domain/*.java</exclude>
						<exclude>com.atd.microservices.core.ediwriter.domain.*</exclude>
					</excludes>
				</configuration>
			</plugin>
			<plugin>
				<groupId>com.google.cloud.tools</groupId>
				<artifactId>jib-maven-plugin</artifactId>
				<version>${jib-maven-plugin.version}</version>
				<executions>
					<execution>
						<phase>package</phase>
						<goals>
							<goal>dockerBuild</goal>
						</goals>
					</execution>
				</executions>
				<configuration>
					<from>                        
                        <image>pjensrc03.atd-us.com:8444/repository/atd_docker/openjdk:openjdk13</image>
                    </from>
					<container>
						<jvmFlags>
							<jvmFlag>-XX:+UnlockExperimentalVMOptions</jvmFlag>
							<jvmFlag>-XX:MaxRAMFraction=2</jvmFlag>
							<jvmFlag>-XshowSettings:vm</jvmFlag>
							<jvmFlag>-DAPIGATEWAY_URL=${APIGATEWAY_URL}</jvmFlag>
							<jvmFlag>-Denv.host.url=${ENV_URL}</jvmFlag>
							
							<jvmFlag>-Dediwriter.ediAnalyticsDataUrl=${EDIWRITER_EDIANALYTICSDATA_URL}</jvmFlag>
							<jvmFlag>-Dediwriter.ediConfigUrl=${EDICONFIG_GETBYPARTNER_URL}</jvmFlag>
							<jvmFlag>-Dediwriter.saveSingledocUrl=${EDICOREDATA_SAVESINGLEDOC_URL}</jvmFlag>
						</jvmFlags>
						<ports>
							<port>9305</port>
						</ports>
					</container>
				</configuration>
			</plugin>
		</plugins>
	</build>

</project>
